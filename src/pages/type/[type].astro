---
import {type Types, type Result} from '../../types/API-types'
import {getAllTypes, getTypeData} from '../../lib/api'
import Layout from '../../layouts/Layout.astro'
import PokemonsType from '../../components/PokemonsType.astro'

export async function getStaticPaths() {
  const pokemonsTypes: Types = await getAllTypes()
  return pokemonsTypes.results.map((Pokemontype: Result) => ({
    params: {type: Pokemontype.name},
  }))
}

const type = (Astro.params).type

if (type === undefined) { return Astro.redirect('/404')}
const typeData = await getTypeData(type)

---
<Layout title={`Pokemon Web Page | ${type[0].toUpperCase()}${type.slice(1)}`}>
  <article class:list={[
    "grid justify-center text-center gap-2 my-10",
    {
      "hidden": !typeData.damage_relations.double_damage_to[0]
    }
  ]}>
    <strong class="text-3xl">x2</strong>
    <div class="flex gap-3 text-center">
      {
        typeData.damage_relations.double_damage_to.map(type => (
          <PokemonsType type={type.name}/>
        ))
      }
    </div>
  </article>
  <article class="grid justify-center text-center gap-2 my-10">
    <strong class="text-3xl">1/2</strong>
    <div class="flex gap-3 text-center">
      {
        typeData.damage_relations.half_damage_to.map(type => (
          <PokemonsType type={type.name}/>
        ))
      }
    </div>
  </article>
  <article class:list={[
    "grid justify-center text-center gap-2 my-10",
    {
      "hidden": !typeData.damage_relations.no_damage_to[0]
    }
  ]}>
    <strong class="text-3xl">x0</strong>
    <div class="flex gap-3 text-center">
      {
        typeData.damage_relations.no_damage_to.map(type => (
          <PokemonsType type={type.name}/>
        ))
      }
    </div>
  </article>
</Layout>